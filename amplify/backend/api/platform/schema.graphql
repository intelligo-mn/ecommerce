type FacebookSettings {
  isEnable: Boolean
  appId: String
  pageId: String
}

type GoogleSettings {
  isEnable: Boolean
  tagManagerId: String
}

type SeoSettings {
  metaTitle: String
  metaDescription: String
  ogTitle: String
  ogImage: Attachment
  twitterHandle: String
  twitterCardType: String
  metaTags: String
  canonicalUrl: String
}

type DeliveryTime {
  title: String
  description: String
}

type SettingsOptions {
  siteTitle: String
  siteSubtitle: String
  currency: String
  minimumOrderAmount: String
  currencyToWalletRatio: String
  signupPoints: String
  deliveryTime: [DeliveryTime]
  logo: Attachment
  taxClass: String
  shippingClass: String
  seo: SeoSettings
  google: GoogleSettings
  facebook: FacebookSettings
  contactDetails: String
  useOTP: String
}

type Settings @model @auth(rules: [{allow: public}]) {
  id: ID!
  options: SettingsOptions
}

type Wallet @model @auth(rules: [{allow: public}]) {
  id: ID!
  totalPoints: Int
  pointsUsed: Int
  availablePoints: Int
}

type Profile {
  id: String
  avatar: Attachment
  bio: String
  socials: [Social!]
  contact: String
}

type AttributeValue {
  id: Int
  value: String
  meta: String
}

enum WithdrawStatus {
  APPROVED
  PROCCESSING
  REJECTED
  PENDING
  ON_HOLD
}

type Withdraw @model @auth(rules: [{allow: public}]) {
  id: ID!
  amount: String
  status: WithdrawStatus
  paymentMethod: String
  details: String
  note: String
  organizationID: ID! @index(name: "byOrganization")
}

type Banner @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  description: String
  image: Attachment
  typeID: ID! @index(name: "byType")
}

type TypeSettings {
  isHome: Boolean
  layoutType: String
  productCard: String
}

type Type @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  slug: String
  promotionalSliders: String
  settings: TypeSettings
  icon: String
  banners: [Banner] @hasMany(indexName: "byType", fields: ["id"])
  categories: [Category] @hasMany(indexName: "byType", fields: ["id"])
  entities: [Entity] @hasMany(indexName: "byType", fields: ["id"])
  tags: [Tag] @hasMany(indexName: "byType", fields: ["id"])
}

type Tag @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  slug: String
  details: String
  image: Attachment
  icon: String
  entities: [Entity] @hasMany(indexName: "byTag", fields: ["id"])
  typeID: ID! @index(name: "byType")
}

type PaymentInfo {
  account: String
  name: String
  email: String
  bank: String
}

type Balance @model @auth(rules: [{allow: public}]) {
  id: ID!
  adminCommissionRate: String
  totalEarnings: String
  withdrawnAmount: String
  currentBalance: String
  paymentInfo: PaymentInfo
}

type Organization @model @auth(rules: [{allow: public}]) {
  id: ID!
  isActive: String
  name: String
  slug: String
  description: String
  coverImage: Attachment
  logo: Attachment
  address: UserAddress
  settings: String
  attributes: [Attribute] @hasMany(indexName: "byOrganization", fields: ["id"])
  orders: [Order] @hasMany(indexName: "byOrganization", fields: ["id"])
  entities: [Entity] @hasMany(indexName: "byOrganization", fields: ["id"])
  staffs: [User] @hasMany(indexName: "byOrganization", fields: ["id"])
  balance: Balance @hasOne
  withdraws: [Withdraw] @hasMany(indexName: "byOrganization", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserOrganization")
}

enum ShippingType {
  FIXED
  PERCENTAGE
  FREE
}

type Shipping @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  amount: String
  isGlobal: String
  type: ShippingType
}

type Social {
  type: String
  link: String
}

type EntityVariationOption {
  name: String
  value: String
}

type EntityVariation @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  price: Float
  sku: String
  isDisable: Boolean
  salePrice: Float
  quantity: Int
  options: EntityVariationOption
}

enum EntityStatus {
  PUBLISH
  DRAFT
}

enum EntityType {
  PRODUCT
  EVENT
  BOOK
}

type Entity @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  slug: String
  entityType: EntityType
  description: String
  inStock: Boolean
  isTaxable: String
  salePrice: String
  maxPrice: String
  minPrice: String
  sku: String
  gallery: [Attachment]
  image: Attachment
  status: EntityStatus
  height: String
  lenght: String
  width: String
  price: Float
  quantity: Int
  unit: String
  categories: [Category] @manyToMany(relationName: "EntityCategory")
  orderID: ID! @index(name: "byOrder")
  organizationID: ID! @index(name: "byOrganization")
  tagID: ID! @index(name: "byTag")
  typeID: ID! @index(name: "byType")
}

enum PaymentGateway {
  QPAY
  SOCIAL_PAY
  CASH_ON_DELIVERY
  BANK_TRANSACTION
  CARD
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  trakingNumber: String
  amount: String
  paidTotal: String
  discount: String
  deliveryFee: String
  deliveryTime: String
  billingAddress: UserAddress
  shippingAddress: UserAddress
  paymentGateway: PaymentGateway
  couponID: ID! @index(name: "byCoupon")
  entities: [Entity] @hasMany(indexName: "byOrder", fields: ["id"])
  userID: ID! @index(name: "byUser")
  organizationID: ID! @index(name: "byOrganization")
}

enum CouponType {
  FIXED_COUPON
  PERCENTAGE_COUPON
  FREE_SHIPPING_COUPON
}

type Coupon @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["intelligoAdmin"], operations: [read, create, update, delete]}, {allow: private, provider: iam}]) {
  id: ID!
  code: String
  description: String
  type: CouponType
  image: Attachment
  isValid: Boolean
  amount: Float
  activeFrom: String
  expireAt: String
  orders: [Order] @hasMany(indexName: "byCoupon", fields: ["id"])
}

type Contact @model @auth(rules: [{allow: public}]) {
  id: ID!
  subject: String
  email: String
  name: String
  description: String
}

type Attachment {
  thumbnail: String
  original: String
}

type Category @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["intelligoAdmin"], operations: [read, create, update, delete]}, {allow: private, provider: iam}]) {
  id: ID!
  name: String
  slug: String
  details: String
  image: Attachment
  icon: String
  entities: [Entity] @manyToMany(relationName: "EntityCategory")
  typeID: ID! @index(name: "byType")
}

type Attribute @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["intelligoAdmin"], operations: [read, create, update, delete]}, {allow: private, provider: iam}]) {
  id: ID!
  name: String
  slug: String
  organizationID: ID! @index(name: "byOrganization")
  values: AttributeValue
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  email: String
  isActiive: String
  orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
  organizationID: ID! @index(name: "byOrganization")
  organizations: [Organization] @manyToMany(relationName: "UserOrganization")
  profile: Profile
  wallet: Wallet @hasOne
}

type UserAddress {
  streetAddress: String
  country: String
  city: String
  state: String
  zip: String
}

enum AddressType {
  BILLING
  SHIPPING
}

type Address @model @auth(rules: [{allow: owner}, {allow: private, provider: iam}, {allow: groups, groups: ["intelligoAdmin"], operations: [read, create, update, delete]}]) {
  id: ID!
  title: String
  default: Boolean
  address: UserAddress
  type: AddressType
}
 